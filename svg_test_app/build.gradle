// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.9.3'
       // classpath 'com.android.tools.build:gradle:2.3.0'

    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
//-----------------------------------
// def my_abis() { return  ["x86", "x86_64", "armeabi-v7a", "mips", "armeabi", "arm64-v8a", "mips64"] }  // some abis (eg "x86_64") require android platform_ver: 21 or newer
def my_abis() { return  ["x86", "armeabi-v7a"] }

def my_compileSdkVersion(){ return 26 }
def my_buildToolsVersion() { return '26.0.0'}
def my_minSdkVersion(){ return 16}
def my_targetSdkVersion() { return my_compileSdkVersion().asType(Integer)}


//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

def want_gcc(){ return true}
def libConfig() { return "debug"} // "debug" or "release"

def tc_family()     { return want_gcc()? "gnu" : "llvm"}                        // "gnu"  (for gcc) or "llvm" (for clang)
def tc_name()       { return want_gcc()? "gcc" : "clang" }                      // "gcc" or "clang"
                      // "3.6", "3.7" (for clang)  or "4.9" , "5"  (for gcc)          // TODO .. doesnt seem to work with "4.9" version (of gnu)
def std_lib ()      { return "gnustl_shared"}               // "gnustl_shared" or "c++_shared"
//def boost_tc()      { return "${tc_family()}-${tc_ver()}" } // eg "gnu-5"  oe "llvm-3.7"
//---------------------
def tc_ver()        { return want_gcc()? "5"  : "3.8" }
def boost_tc()      { return "gnu-5" } //${tc_family()}-${tc_ver()}" } // eg "gnu-5"  oe "llvm-3.7"   // must match "std_lib()"
def boost_ver() { return "1.59"}
//-----------------------

def platform_ver(){ return 9}


def platform_dir()      { return "${ndk_dir()}/platforms/android-${platform_ver()}" }
def platform_lib_dir()  { return "${platform_dir()}/arch-arm/usr/lib" }  // todo generalize this for "arch-mips", "arch-x86" etc
def platform_inc_dir()  { return "${platform_dir()}/arch-arm/usr/include" }  // todo generalize this for "arch-mips", "arch-x86" etc

def boost_dir() { return  "${crystax_dir()}/sources/boost/${boost_ver()}" }
// def boost_dir() { return  "${ndk_dir()}/sources/boost/${boost_ver()}" }
def opencv_dir()    { return local_props("opencv.dir") }


def libs_dir()    { return "$projectDir/../../win";}
// def ext_dir()        { return local_props("ext.dir")}
//def libusb_dir()    { return "${ext_dir()}/libusb/ext_libusb" }
//def libusbpp_dir()  { return "${ext_dir()}/libusbpp/ext_libusbpp" }
//def libzip_dir()  { return "${ext_dir()}/libzip/ext_libzip" }


//def libusb_lib_dir(abi)     { return "${libusb_dir()}/android/libs/${abi}" }
//def libusbpp_lib_dir(abi)   { return "${libusbpp_dir()}/android/libs/${abi}" }
//def libzip_lib_dir(abi)     { return "${libzip_dir()}/libs/${abi}" }

//def libusbpp_inc_dir()      { return "${libusbpp_dir()}/headers"}
//def libusb_inc_dir()        { return "${ext_dir()}/libusb/ext_libusb/libusb/"}
//def libzip_inc_dir1()        { return "${ext_dir()}/libzip"}            // we want to #include "ext_libzip/bla.h"
//def libzip_inc_dir2()        { return "${ext_dir()}/libzip/ext_libzip"} // libzip headers want to include other libzip headers via #include "bla.h"

def tux_lib_dir(abi){ return "${tux_dir()}/libs/${abi}" }
def tux_inc_dir()   { return "${tux_dir()}/include" }

def crystax_lib_dir(abi){ return "${ndk_dir()}/sources/crystax/libs/${abi}" }
def boost_lib_dir(abi){ return "${boost_dir()}/libs/${abi}/${boost_tc()}" }


def opencv_lib_dir(abi){ return "${opencv_dir()}/platforms/build_android_arm/lib/${abi}" }

// ---------------------
def opencv_inc_dir()                { return "${opencv_dir()}/include" }
def opencv_mods_inc_dir()           { return "${opencv_dir()}/platforms/build_android_arm" }
def opencv_mod_core_inc_dir()       { return "${opencv_dir()}/modules/core/include" }
def opencv_mod_imgproc_inc_dir()    { return "${opencv_dir()}/modules/imgproc/include" }
def opencv_mod_highgui_inc_dir()    { return "${opencv_dir()}/modules/highgui/include" }
def opencv_mod_ocl_inc_dir()        { return "${opencv_dir()}/modules/ocl/include" }
def opencv_mod_objdetect_inc_dir()  { return "${opencv_dir()}/modules/objdetect/include" }
def opencv_mod_photo_inc_dir()      { return "${opencv_dir()}/modules/photo/include" }
def opencv_mod_features2d_inc_dir() { return "${opencv_dir()}/modules/features2d/include" }
def opencv_mod_flann_inc_dir()      { return "${opencv_dir()}/modules/flann/include" }
def opencv_mod_ml_inc_dir()         { return "${opencv_dir()}/modules/ml/include" }


def boost_inc_dir()             { return "${boost_dir()}/include" }

def cairo_inc_dir() { return "${tux_inc_dir()}/cairo-1.14.0/src"; } // "${tux_dir()}/cairo-1.14.0/include" }
def png_inc_dir()   { return "${tux_inc_dir()}/platform_external_libpng"}
def rsvg_inc_dir()  { return "${tux_inc_dir()}/librsvg-2.40.9"}

def glib_inc_dir()  { return "${tux_inc_dir()}/glib-2.44.1"}
def glib_inc_dir2() { return "${glib_inc_dir()}/glib"}
def glib_inc_dir3() { return "${glib_inc_dir()}/gio"}
def glib_inc_dir4() { return "${glib_inc_dir()}/gmodule"}

def gdk_pixbuf_inc_dir() { return "${tux_inc_dir()}/gdk-pixbuf-2.31.4"}

//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
def tux_dir()           { return local_props("tux.dir")}
def ndk_dir()           { return local_props("ndk.dir")}
def crystax_dir()       { return local_props("crystax.dir")}
//-------------------------------------------------
def local_props(key) { // version = "ndk.dir" or "ndk.dir.nightly"
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def val = properties.getProperty(key, null)
    if (val == null)
        throw new GradleException("""\
                cant find value '${key}' in file 'local.properties'.  """)

    return val
}


