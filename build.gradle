// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
// def my_abis() { return  ["x86", "x86_64", "armeabi-v7a", "mips", "armeabi", "arm64-v8a", "mips64"] }  // some abis (eg "x86_64") require android platform_ver: 21 or newer
def my_abis() { return  ["armeabi-v7a", "x86"] }


def my_compileSdkVersion(){ return 26 }
def my_buildToolsVersion() { return '26.0.0'}
def my_minSdkVersion(){ return 16}
def my_targetSdkVersion() { return my_compileSdkVersion().asType(Integer)}


//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

def want_gcc(){ return false}

def tc_family()   { return want_gcc()? "gnu" : "llvm"}                  // "gnu"  (for gcc) or "llvm" (for clang)
def tc_name()     { return want_gcc()? "gcc" : "clang" }                // "gcc" or "clang"
def tc_ver()      {return want_gcc()? "4.9" :  "3.5"}                   // "3.6", "3.7" (for clang)  or "4.9" , "5"  (for gcc)
def std_lib ()    { return want_gcc()? "gnustl_shared" : "c++_shared"}  // "gnustl_shared" or "c++_shared"

//---------------------


//-----------------------

def platform_ver(){return 9}


//def platform_dir()      { return "${ndk_dir()}/platforms/android-${platform_ver()}" }

def ndk_dir() { return local_props("ndk.dir") }


def arch_triple_inc(arch_triple){ return "-I" + "${ndk_dir()}/sysroot/usr/include/${arch_triple}"}
//--------------------------------------------
def arch(abi)
{
    switch (abi)
    {
        case "armeabi"          :
        case "armeabi-v7a"      :
        case "armeabi-v7a-hard" : return "arm"

        case "arm64-v8a"        : return "arm64"

        case "x86"              : return "x86"
        case "x86_64"           : return "x86_64"

        case "mips"             : return "mips"
        case "mips64"           : return "mips64"



        default: return "unknown_abi"
    }
}
//--------------------------------------------
def arch_triple(arch)
{
    switch (arch)
    {
        case "arm"      : return "arm-linux-androideabi"
        case "x86"      : return "i686-linux-android"

        case "mips"     : return "mipsel-linux-android"
        case "arm64"    : return "aarch64-linux-android"
        case "x86_64"   : return "x86_64-linux-android"
        case "mips64"   : return "mips64el-linux-android"

        default         : return "unknown_arch"
    }
}

//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

//-------------------------------------------------
def local_props(key) { // version = "ndk.dir" or "ndk.dir.nightly"
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def val = properties.getProperty(key, null)
    if (val == null)
        throw new GradleException("""\
                cant find value '${key}' in file 'local.properties'.  """)

    return val
}